plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'org.ajoberstar.grgit' version '5.3.0'
}

group = "net.william278"
def pluginId = 'preprocessor'
defaultTasks 'licenseFormat', 'build'

version "$ext.plugin_version${versionMetadata()}"

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.0")
}

license {
    header = rootProject.file('HEADER')
    include '**/*.java'
    newLine = true
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.11.4')
        }

        // Create a new test suite
        functionalTest(JvmTestSuite) {
            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation project()
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) }
                }
            }
        }
    }
}

gradlePlugin {
    website = 'https://github.com/WiIIiam278/PreProcessor'
    vcsUrl = 'https://github.com/WiIIiam278/PreProcessor'

    // Define the plugin
    plugins {
        preprocessor {
            id = group + "." + pluginId
            implementationClass = 'net.william278.preprocessor.PreProcessorPlugin'
            displayName = 'PreProcessor Plugin'
            description = 'Comment pre-processor for Java development'
            tags.set(['preprocess', 'java'])
        }
    }
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.functionalTest)
}

tasks.withType(AbstractPublishToMaven).configureEach {
    dependsOn(tasks.named("check"))
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.release.set 17
javadoc.options.encoding = 'UTF-8'
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

jar {
    manifest {
        attributes 'Implementation-Version': project.version
    }
    from '../LICENSE'
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

publishing {
    repositories {
        if (System.getenv("RELEASES_MAVEN_USERNAME") != null) {
            maven {
                name = "william278-releases"
                url = "https://repo.william278.net/releases"
                credentials {
                    username = System.getenv("RELEASES_MAVEN_USERNAME")
                    password = System.getenv("RELEASES_MAVEN_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
        if (System.getenv("SNAPSHOTS_MAVEN_USERNAME") != null) {
            maven {
                name = "william278-snapshots"
                url = "https://repo.william278.net/snapshots"
                credentials {
                    username = System.getenv("SNAPSHOTS_MAVEN_USERNAME")
                    password = System.getenv("SNAPSHOTS_MAVEN_PASSWORD")
                }
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }

    publications {
        pluginMaven(MavenPublication) {
            configureEach {
                groupId = group
                artifactId = pluginId

                pom {
                    name.set("PreProcessor")
                    description.set("Comment pre-processor for Java development.")
                    url.set("https://github.com/WiIIiam278/PreProcessor")

                    licenses {
                        license {
                            name.set("CC BY-NC-SA 4.0")
                            url.set("https://raw.githubusercontent.com/WiIIiam278/PreProcessor/main/LICENSE")
                        }
                    }

                    scm {
                        connection.set("git:https://github.com/WiIIiam278/PreProcessor.git")
                        developerConnection.set("git:https://github.com/WiIIiam278/PreProcessor.git")
                        url.set("https://github.com/WiIIiam278/PreProcessor")
                    }

                    developers {
                        developer {
                            id = "william278"
                            name = "William278"
                            email = "will27528@gmail.com"
                            organizationUrl = "https://william278.net"
                        }
                    }
                }
            }
        }
    }
}

logger.lifecycle("Building PreProcessor ${version} by ToCraft & William278")

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    // Require grgit
    if (grgit == null) {
        return '-unknown'
    }

    // If unclean, return the last commit hash with -indev
    if (!grgit.status().clean) {
        return '-' + grgit.head().abbreviatedId + '-indev'
    }

    // Otherwise if this matches a tag, return nothing
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }
    return '-' + grgit.head().abbreviatedId
}